Step 1: Set up your development environment
- Make sure you have the latest version of Node.js installed.
- Install React Native CLI using `npm install -g react-native-cli`.
- Create a new React Native project using `react-native init YourProjectName`.

Step 2: Integrate Firebase in your project
- Visit the Firebase Console (https://console.firebase.google.com/) and create a new project.
- Add a new Android or iOS app in the Firebase project (or both if needed).
- Download the `google-services.json` (Android) or `GoogleService-Info.plist` (iOS) configuration file and place it in your project's `android/app` or `ios` directory, respectively.

Step 3: Install Firebase SDK in your project
- Install Firebase using `npm install --save @react-native-firebase/app`.
- Install Firebase Messaging using `npm install --save @react-native-firebase/messaging`.

Step 4: Configure React Native Firebase
- Link Android and iOS modules with `react-native link @react-native-firebase/app`.
- Android: In `android/build.gradle`, add the following line to dependencies:
  `classpath 'com.google.gms:google-services:4.3.3'`
- Android: In `android/app/build.gradle`, add `apply plugin: 'com.google.gms.google-services'` at the bottom of the file.
- iOS: In the `ios/Podfile`, add your Firebase Messaging pod: `pod 'Firebase/Messaging'`. Then run `pod install`.

Step 5: Handling user permissions and tokens
- Import messaging from Firebase and request permissions: 
  ```
  import messaging from '@react-native-firebase/messaging';
  
  async function requestUserPermission() {
    const authStatus = await messaging().requestPermission();
    const enabled =
      authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
      authStatus === messaging.AuthorizationStatus.PROVISIONAL;
    
    if (enabled) {
      console.log('Authorization status:', authStatus);
    }
  }
  ```
- Call `requestUserPermission()` during your app's startup, e.g., in `componentDidMount()` or a `useEffect()` hook.
- To get the user's push notification token, call the `getToken()` method: 
  ```
  messaging()
    .getToken()
    .then(token => {
      console.log('Device FCM Token:', token);
    });
  ```

Step 6: Implementing background message handling
- Add a file called `firebase-messaging-sw.js` to the root of your project, with the following content:
  ```
  importScripts('https://www.gstatic.com/firebasejs/7.15.0/firebase-app.js');
  importScripts('https://www.gstatic.com/firebasejs/7.15.0/firebase-messaging.js');
  
  firebase.initializeApp({
    // Your firebase credentials
  });
  
  const messaging = firebase.messaging();
  ```
- Add the `setBackgroundMessageHandler` method in your app:
  ```
  messaging().setBackgroundMessageHandler(async remoteMessage => {
    console.log('Message handled in the background!', remoteMessage);
  });
  ```

Step 7: Handling foreground messages
- Subscribe to messages using the `onMessage()` method:
  ```
  messaging().onMessage(async remoteMessage => {
    console.log('Message received in the foreground!', remoteMessage);
  });
  ```

Step 8: Test the app
- Run `react-native run-android` or `react-native run-ios` to test your app on a device or simulator.
- Send a test notification from the Firebase Console.

Your React Native application should now be able to receive push notifications using Firebase. Don't forget to keep your Firebase credentials up-to-date and manage unsubscribe events if necessary.